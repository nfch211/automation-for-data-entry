import openpyxl
import datetime
from tkinter import Tk, filedialog
from fuzzywuzzy import fuzz, process
from openpyxl.styles import Font, Border, Side
from openpyxl.styles import Font
import os
import re


def make_path_absolute(path):
    if not path.startswith(("http://", "https://", "file:///")):
        return os.path.abspath(path)
    return path

def load_br_link_map():
    source_excel_path = "HK BR Data.xlsx"
    source_excel_path = make_path_absolute(source_excel_path)
    wb = openpyxl.load_workbook(source_excel_path)
    ws = wb.active

    br_link_map = {}
    company_name_map = set()


    for row in ws.iter_rows(min_row=2, values_only=True):
        br_number = str(row[0])[:12]  # Convert row[0] to string before slicing
        original_source = row[5]
        original_source = make_path_absolute(original_source)
        
        # Assuming expiry_date is in column index 4 (5th column)
        expiry_date = row[3]
        
        # Convert expiry_date to datetime.date object if it's a string
        if isinstance(expiry_date, str):
            try:
                expiry_date = datetime.datetime.strptime(expiry_date, "%d/%m/%Y").date()
            except ValueError:
                print(f"Unexpected date format for BR number {br_number}: {expiry_date}. Skipping row.")
                continue  # Skip to next row if date format is incorrect
        
        company_name = row[1].lower() if row[1] else ""

        # Update the br_link_map with the new expiry_date
        if br_number in br_link_map:
            existing_source, existing_expiry_date = br_link_map[br_number]
            if expiry_date > existing_expiry_date:
                br_link_map[br_number] = (original_source, expiry_date)
        else:
            br_link_map[br_number] = (original_source, expiry_date)

        company_name_map.add(company_name)

    return br_link_map, company_name_map


def normalize_business_name(name):
    words_to_ignore = ["company", "limited", "co.", "ltd", "&", ".", " ", ",", "-"]
    normalized = name.lower()
    for word in words_to_ignore:
        normalized = normalized.replace(word, "")
    return normalized

def update_excel_hyperlinks(target_excel_path, br_link_map, business_name_map, business_name_to_actual):
    wb = openpyxl.load_workbook(target_excel_path)
    ws = wb.active

    rows_updated = 0

    for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        country_cell = ws.cell(row=idx, column=4)
        number_cell = ws.cell(row=idx, column=5)

        country = country_cell.value
        original_number = number_cell.value
        number_length = len(str(original_number))


        # Existing logic for the original BR pattern
        target_br_number = f"{row[4]}-{row[5]}"
        print(f"Checking BR number from target Excel: {target_br_number}...")

        if target_br_number in br_link_map:
            source_link, expiry_date = br_link_map[target_br_number]
            source_link = make_path_absolute(source_link)
            print(f"Match found: Target BR number {target_br_number} matches with source BR number {target_br_number}.")

            file_path_cell = ws.cell(row=idx, column=56)
            file_path_cell.value = source_link

            hyperlink_formula_cell = ws.cell(row=idx, column=5)
            shortened_br_number = target_br_number[:8]
            hyperlink_formula = f'=HYPERLINK("{source_link}", "{shortened_br_number}")'
            hyperlink_formula_cell.value = hyperlink_formula

            hyperlink_style = Font(underline='single', color='0563C1')
            hyperlink_formula_cell.font = hyperlink_style

            expiry_cell = ws.cell(row=idx, column=8)
            expiry_cell.value = expiry_date
            expiry_cell.number_format = 'DD-MMM-YYYY'

            rows_updated += 1

        else:
            print(f"No matching BR number found for: {target_br_number} in source data. Skipping fuzzy matching.")
            continue

        # New fuzzy matching logic
        target_company_cell = ws.cell(row=idx, column=3)  # Assuming company names are in column C
        target_company_name = target_company_cell.value

        if target_company_name:
            normalized_target_name = normalize_business_name(target_company_name)
            best_match, best_score = process.extractOne(normalized_target_name, business_name_to_actual.keys())

            if best_score < 90:
                target_company_cell.font = Font(color="FF0000")  # Red font color for company names with low similarity

    wb.save(target_excel_path)
    print(f"Update complete. Updated {rows_updated} rows.")

if __name__ == "__main__":
    br_link_map, company_name_map = load_br_link_map()

    company_name_to_actual = {}
    for company_name in company_name_map:
        normalized_name = normalize_business_name(company_name)
        company_name_to_actual[normalized_name] = company_name
    
    root = Tk()
    root.withdraw()

    target_excel_path = filedialog.askopenfilename(title="Select the Excel file to update", filetypes=[("Excel files", "*.xlsx;*.xlsm")])
    if not target_excel_path:
        print("No file selected. Exiting...")
        exit()

    update_excel_hyperlinks(target_excel_path, br_link_map, company_name_map, company_name_to_actual)
    print("Hyperlinks and Expiry Dates updated successfully.")

