import openpyxl
import datetime
from tkinter import Tk, filedialog, messagebox
from tkinter.simpledialog import askstring
from fuzzywuzzy import fuzz, process
from openpyxl.styles import Font
import os
import re
import webbrowser


def update_br_number_in_excel(ws_source, original_br_number, new_br_number):
    for row in ws_source.iter_rows(min_row=2):
        cell = row[0]  # Assuming BR number is in the first column
        # Extract the parts of the BR number using regex or your preferred method
        br_parts = re.match(r"(\d{8})-(\d{3})", cell.value)
        if br_parts:
            current_br_core = br_parts.group(1)
            current_br_extension = br_parts.group(2)
            original_br_core, original_br_extension = original_br_number.split('-')
            new_br_core, new_br_extension = new_br_number.split('-')

            # Check if the core part of the BR number matches
            if current_br_core == original_br_core and current_br_extension == original_br_extension:
                # Replace with the new BR number, keeping the rest of the original BR number intact
                updated_br_number = f"{new_br_core}-{new_br_extension}{cell.value[len(br_parts.group(0)):]}"
                cell.value = updated_br_number
                print(f"Updated BR number from {cell.value} to {updated_br_number}")
                return True
            else:
                print(f"Original BR number {original_br_number} not found in row {row[0].row}.")
    print(f"Could not update BR number {original_br_number} to {new_br_number} because it was not found.")
    return False


def open_file_with_path(path):
    try:
        # Check if it's a network path and format it correctly for the webbrowser module
        if path.startswith("//"):
            network_path = 'file:' + path
            webbrowser.open(network_path)
        # Directly open the path with webbrowser if it starts with 'file:'
        elif path.startswith("file:"):
            webbrowser.open(path)
        # If it's a local file path, check if the file exists and then open it
        elif os.path.isfile(path):
            if os.name == 'nt':  # for Windows
                os.startfile(path)
            elif os.name == 'posix':  # for macOS, Linux, Unix, etc.
                os.system(f"open '{path}'" if sys.platform == "darwin" else f"xdg-open '{path}'")
        else:
            print(f"The file does not exist: {path}")
    except Exception as e:
        print(f"Error opening file: {e}. Continuing to the next file.")


def make_path_absolute(path):
    if not path.startswith(("http://", "https://", "file:///")):
        return os.path.abspath(path)
    return path

def load_br_link_map():
    source_excel_path = "HK BR Data.xlsx"
    source_excel_path = make_path_absolute(source_excel_path)
    wb = openpyxl.load_workbook(source_excel_path)
    ws = wb.active

    br_link_map = {}
    br_address_map = {}  # New map for BR addresses
    company_name_map = {}  # Changed from set to dictionary

    for row in ws.iter_rows(min_row=2, values_only=True):
        br_number = str(row[0])[:12]
        original_source = row[5]
        original_source = make_path_absolute(original_source)
        br_address = row[2]  # Assuming BR address is in the third column

        expiry_date = row[3]
        if isinstance(expiry_date, str):
            try:
                expiry_date = datetime.datetime.strptime(expiry_date, "%d/%m/%Y").date()
            except ValueError:
                expiry_date = None  # Set to None if the date is invalid
        
        company_name = row[1].lower() if row[1] else ""

        # Update the record if a newer (farther future) expiry date is found
        if br_number in br_link_map:
            current_record = br_link_map[br_number]
            if expiry_date and (current_record[1] is None or expiry_date > current_record[1]):
                br_link_map[br_number] = (original_source, expiry_date)
        else:
            br_link_map[br_number] = (original_source, expiry_date)

        br_address_map[br_number] = br_address  # Storing the BR address
        company_name = row[1] if row[1] else ""
        company_name_map[br_number] = company_name  # Storing the company name

    return br_link_map, br_address_map, company_name_map




def normalize_business_name(name):
    words_to_ignore = ["company", "limited", "co.", "ltd", "&", ".", " ", ",", "-"]
    normalized = name.lower()
    for word in words_to_ignore:
        normalized = normalized.replace(word, "")
    return normalized

def count_variations(br1, br2):
    variations = sum(1 for c1, c2 in zip(br1, br2) if c1 != c2)
    variations += abs(len(br1) - len(br2))
    return variations

def prompt_for_br_verification(ws, row_index, target_br_number, similar_br_number):
    root = Tk()
    root.withdraw()  # Hide the main window

    company_name = ws.cell(row=row_index, column=3).value  # Fetch company name from column C
    message = (
        f"Company Name: {company_name}\n"
        f"Target BR Number: {target_br_number}\n"
        f"Similar BR Number: {similar_br_number}\n"
        f"Replace?"
    )

    if messagebox.askyesno("Confirm Replacement", message):
        return similar_br_number
    else:
        new_br_number = askstring("Input", "Enter the correct BR number:", initialvalue=target_br_number)
        return new_br_number if new_br_number else None

def update_hyperlink(ws, row_index, source_link, br_number, expiry_date):
    file_path_cell = ws.cell(row=row_index, column=56)
    file_path_cell.value = source_link

    hyperlink_formula_cell = ws.cell(row=row_index, column=5)
    shortened_br_number = br_number[:8]
    hyperlink_formula = f'=HYPERLINK("{source_link}", "{shortened_br_number}")'
    hyperlink_formula_cell.value = hyperlink_formula

    hyperlink_style = Font(underline='single', color='0563C1')
    hyperlink_formula_cell.font = hyperlink_style

    expiry_cell = ws.cell(row=row_index, column=8)
    expiry_cell.value = expiry_date
    expiry_cell.number_format = 'DD-MMM-YYYY'


def update_excel_hyperlinks(target_excel_path, br_link_map, br_address_map, business_name_map, business_name_to_actual, ws_source):
    wb = openpyxl.load_workbook(target_excel_path)
    ws = wb.active

    rows_updated = 0

    for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        target_br_number = f"{row[4]}-{row[5]}"
        print(f"Checking BR number from target Excel: {target_br_number}...")

        if target_br_number in br_link_map:
            source_link, expiry_date = br_link_map[target_br_number]
            source_link = make_path_absolute(source_link)
            br_address = br_address_map[target_br_number]  # Retrieve the BR address

            # Retrieve the company name for the matching BR number from the source Excel
            company_name = business_name_map.get(target_br_number, "")

            file_path_cell = ws.cell(row=idx, column=56)
            file_path_cell.value = source_link

            hyperlink_formula_cell = ws.cell(row=idx, column=5)
            shortened_br_number = target_br_number[:8]
            hyperlink_formula = f'=HYPERLINK("{source_link}", "{shortened_br_number}")'
            hyperlink_formula_cell.value = hyperlink_formula

            hyperlink_style = Font(underline='single', color='0563C1')
            hyperlink_formula_cell.font = hyperlink_style

            expiry_cell = ws.cell(row=idx, column=8)
            expiry_cell.value = expiry_date
            expiry_cell.number_format = 'DD-MMM-YYYY'

            # Set BR address to column BC (index 55)
            address_cell = ws.cell(row=idx, column=55)
            address_cell.value = br_address

            # Set company name to column BA (index 53)
            company_name_cell = ws.cell(row=idx, column=53)
            company_name_cell.value = company_name

            rows_updated += 1
        else:
            closest_br_number = None
            smallest_variation = float('inf')
            for br in br_link_map.keys():
                variation = count_variations(target_br_number, br)
                if variation <= 2 and variation < smallest_variation:
                    closest_br_number = br
                    smallest_variation = variation

            if closest_br_number:
                open_file_with_path(br_link_map[closest_br_number][0])
                verified_br_number = prompt_for_br_verification(ws, idx, target_br_number, closest_br_number)

                if verified_br_number == closest_br_number:
                    source_link, expiry_date = br_link_map[closest_br_number]
                    source_link = make_path_absolute(source_link)
                    update_hyperlink(ws, idx, source_link, verified_br_number, expiry_date)
                    rows_updated += 1
                elif verified_br_number:
                    new_source_link, new_expiry_date = br_link_map[closest_br_number]
                    new_source_link = make_path_absolute(new_source_link)
                    if update_br_number_in_excel(ws_source, closest_br_number, verified_br_number):
                        print(f"Updated BR number from {closest_br_number} to {verified_br_number} in source Excel.")
                        br_link_map[verified_br_number] = (new_source_link, new_expiry_date)
                        update_hyperlink(ws, idx, new_source_link, verified_br_number, new_expiry_date)
                        rows_updated += 1
                    else:
                        print(f"Could not find the original BR number in source Excel: {closest_br_number}")
                else:
                    print(f"User chose not to update the BR number for {target_br_number}. Skipping update.")
            else:
                print(f"No close matches for BR number: {target_br_number}")

    wb.save(target_excel_path)
    print(f"Update complete. Updated {rows_updated} rows.")



if __name__ == "__main__":

    br_link_map, br_address_map, company_name_map = load_br_link_map()


    # Load the source Excel workbook and worksheet
    source_excel_path = make_path_absolute("HK BR Data.xlsx")
    source_wb = openpyxl.load_workbook(source_excel_path)
    source_ws = source_wb.active

    company_name_to_actual = {}
    for company_name in company_name_map:
        normalized_name = normalize_business_name(company_name)
        company_name_to_actual[normalized_name] = company_name
    
    root = Tk()
    root.withdraw()
    target_excel_path = filedialog.askopenfilename(title="Select the Excel file to update", filetypes=[("Excel files", "*.xlsx;*.xlsm")])
    
    if not target_excel_path:
        print("No file selected. Exiting...")
    else:
        update_excel_hyperlinks(target_excel_path, br_link_map, br_address_map, company_name_map, company_name_to_actual, source_ws)

        
        # Save the target workbook
        wb = openpyxl.load_workbook(target_excel_path)
        wb.save(target_excel_path)
        
        # Save the source workbook
        source_wb.save(source_excel_path)

        print("Hyperlinks and Expiry Dates updated successfully.")
