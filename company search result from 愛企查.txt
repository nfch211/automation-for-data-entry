import tkinter as tk
from tkinter import filedialog
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd

def search_br_number_on_baidu(br_number):
    url = f"https://www.baidu.com/s?wd={br_number}"

    # Set up Chrome options to run headless (without opening a visible browser window)
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--log-level=3")  # Add this line to suppress logging

    # Create a Chrome webdriver instance
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

    # Perform the search
    driver.get(url)

    try:
        # Wait for the search results to load, now set to 3 seconds
        WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".c-container"))
        )

        # Extract search results
        result_items = driver.find_elements(By.CSS_SELECTOR, ".c-container")
        if result_items:
            # Create a set to store unique search results
            unique_results = set()

            for item in result_items:
                # Try to extract the title and content separately
                try:
                    title = item.find_element(By.CSS_SELECTOR, "h3.t").text
                except:
                    title = ""
                try:
                    text_content = item.find_element(By.CSS_SELECTOR, ".c-abstract, .c-span9.c-span-last").text
                except:
                    text_content = ""

                # Check if the BR number appears in the search result text
                if br_number in text_content:
                    # Combine the title and content to create the complete result
                    complete_result = f"{title}\n{text_content}"
                    unique_results.add(complete_result)

            return list(unique_results)
        else:
            return []  # Return an empty list if no results found
    except Exception as e:
        print(f"Failed to retrieve search results. Error: {str(e)}")
        return []
    finally:
        driver.quit()

def search_and_save_results(input_file):
    try:
        df = pd.read_excel(input_file)

        results = []
        for br_number in df['BR Number']:
            print(f"Searching for BR Number: {br_number}")
            search_result = search_br_number_on_baidu(br_number)
            results.append("\n".join(search_result))

        df['Search Results'] = results

        output_file = "co.search.xlsx"
        df.to_excel(output_file, index=False)
        print(f"Search results saved to {output_file}")
    except Exception as e:
        print(f"Error: {str(e)}")

def cli_version():
    input_file = input("Enter the path to the Excel file with BR Numbers: ")
    search_and_save_results(input_file)

def gui_version():
    def select_input_file():
        input_file_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
        input_file_entry.delete(0, tk.END)
        input_file_entry.insert(0, input_file_path)

    def search_and_save_results_gui():
        input_file = input_file_entry.get()
        try:
            search_and_save_results(input_file)
            output_label.config(text="Search results saved to co.search.xlsx", fg="blue")
        except Exception as e:
            output_label.config(text=f"Error: {str(e)}", fg="red")

    root = tk.Tk()
    root.title("BR Number Search on Baidu")
    root.geometry("400x200")

    input_file_label = tk.Label(root, text="Select Input Excel File:")
    input_file_label.pack(pady=10)
    input_file_entry = tk.Entry(root, width=40)
    input_file_entry.pack(pady=5)
    browse_button = tk.Button(root, text="Browse", command=select_input_file)
    browse_button.pack(pady=5)

    search_button = tk.Button(root, text="Search and Save Results", command=search_and_save_results_gui)
    search_button.pack(pady=10)

    output_label = tk.Label(root, text="", fg="blue")
    output_label.pack(pady=5)

    root.mainloop()

if __name__ == "__main__":
    print("Choose the version you want to use:")
    print("1. Command-line version")
    print("2. GUI version")

    choice = input("Enter your choice (1 or 2): ")

    if choice == "1":
        cli_version()
    elif choice == "2":
        gui_version()
    else:
        print("Invalid choice. Please select 1 or 2.")
