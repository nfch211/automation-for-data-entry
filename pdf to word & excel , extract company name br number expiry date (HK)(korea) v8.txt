import os
import tkinter as tk
from tkinter import filedialog
from azure.ai.formrecognizer import DocumentAnalysisClient
from azure.core.credentials import AzureKeyCredential
from docx import Document
import openpyxl
import re
from fuzzywuzzy import fuzz  # pip install fuzzywuzzy
from google.cloud import translate_v2 as translate  # Import the translate library
import logging
import zipfile
import zlib
from openpyxl.styles import Font  # Add this import at the beginning of your script
from openpyxl.styles import PatternFill
light_grey_fill = PatternFill(start_color='D3D3D3', end_color='D3D3D3', fill_type='solid')


red_font = Font(color="FF0000")  # Define the red font color

# Path to your JSON credentials
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'C:/Users/hofong/Desktop/python/Google Translation API/boxwood-axon-403207-a2d2abe9a96d.json'

# Create a client for the Google Cloud Translation API
translate_client = translate.Client()

# Set your endpoint and key variables with the values from the Azure portal
endpoint = "https://hktdcbr.cognitiveservices.azure.com/"
key = "28ff496d762e4b5e8a6beecaabd61392"


def get_cleaned_text(doc):
    text = " ".join([p.text for p in doc.paragraphs if p.text.strip()])
    return text  # Keeping the text as-is without stripping non-alphabetic characters

def update_status(status):
    label_status.config(text=status)
    window.update_idletasks()

def select_input_folder():
    input_folder = filedialog.askdirectory(title="Select Input Folder")
    if input_folder:
        entry_input_folder.delete(0, tk.END)
        entry_input_folder.insert(tk.END, input_folder)

def select_output_folder():
    output_folder = filedialog.askdirectory(title="Select Output Folder")
    if output_folder:
        entry_output_folder.delete(0, tk.END)
        entry_output_folder.insert(tk.END, output_folder)

def all_words_present(word_list, text):
    return all(word in text for word in word_list)

from datetime import datetime

def extract_data_from_word(doc_path):
    try:
        doc = Document(doc_path)
    except (zipfile.BadZipFile, zlib.error) as e:
        print(f"Error opening document {doc_path}: {e}")
        return None, None, None, None, None  # returning None for all values to indicate an error



    doc = Document(doc_path)
    company_name = "No Match Found"
    expiry_date = "No Match Found"
    br_number = "No Match Found"
    dates_found = []
    company_address = ""  # Default is blank


    lines = [p.text.strip() for p in doc.paragraphs]
    joined_line = ' '.join(lines)  # Join all lines together into one line
    print(f'Joined line for company name extraction: {joined_line}')  # Print the joined line to cmd

    lines_with_key_word = []


    lines = [p.text.strip() for p in doc.paragraphs]
    lines_with_key_word = []

    # Your existing logic for Korean BR pattern
    br_numbers_new_pattern = re.findall(r'(\d{3}-\d{2}-\d{5})', joined_line, re.MULTILINE)  # Search in all text
    if br_numbers_new_pattern:
        br_number = br_numbers_new_pattern[0]

        # New logic to extract company name based on BR number pattern
        for line in lines:
            match = re.search(r'(.*?)[(](\d{3}-\d{2}-\d{5})', line)
            if match:
                company_name = match.group(1).strip()
                break  # Exit loop once the company name is found

    if not company_name:  # If company_name is not extracted using the first pattern
        print("Entering the company_name extraction block...")  # Debugging statement
        # Join all lines to form a single text blob for pattern matching
        joined_text = ' '.join(lines)
        print(f"Joined text for company name extraction: {joined_text}")  # Debugging print statement
        # Check for both patterns "법인명 ( 단체명 ) :" and "법인명(단체명) :"
        match = re.search(r'법인명\s*\(?\s*단체명\s*\)?\s*:\s*(.+)', joined_text)
        if match:
            korean_name = match.group(1).strip()
            print(f"Korean name found: {korean_name}")  # Debugging print statement
            # Translate the Korean name to English using the Google Cloud Translation API
            result = translate_client.translate(korean_name, target_language='en')
            translated_name = result['translatedText']
            # Combine the Korean name and translated name
            company_name = f"{korean_name} ({translated_name})"
            print(f"Translated company name: {company_name}")  # Debugging print statement


   
    # Existing logic for other BR patterns
    br_numbers_initial = re.findall(r'(?<!\w)\d{8}-\d{3}-\d{2}-\d{2}-[A-Za-z0-9](?!\w)', joined_line)
    if br_numbers_initial:
        br_number = br_numbers_initial[0]
    else:
        # Find the new pattern of BR numbers
        br_numbers_new = re.findall(r'(?<!\w)(9(?:[A-Z\d]\s?){17}|4\d{14})(?!\w)', joined_line, re.MULTILINE)
        if br_numbers_new:
            br_number = br_numbers_new[0].replace(" ", "")
            company_name = None  # Leave company name empty
            expiry_date = None   # Leave expiry date empty

        # Now, process the found BR numbers
        br_numbers_new = [number.replace(" ", "") for number in br_numbers_new]  # Remove spaces
        if br_numbers_new:
            br_number = br_numbers_new[0]


    for line in lines:
        dates = re.findall(r'\d{2}/\d{2}/\d{4}', line)
        if dates:
            dates_found.extend(dates)



    future_dates = []
    for date_str in dates_found:
        try:
            date_format = datetime.strptime(date_str, '%d/%m/%Y')
            future_dates.append(date_format)
        except ValueError:
            continue  # Skip invalid date formats
    if future_dates:
        expiry_date = max(future_dates).strftime('%d/%m/%Y')




    for i, line in enumerate(lines):
        joined_line = ' '.join(lines[i:])  # Join all lines together from the current line onwards into one line
        print(f'Joined line for company name extraction: {joined_line}')  # Print the joined line to cmd

        # If no company name found, try to extract uppercase letters between the specified keywords
        pattern = re.compile(r'業務\s*/\s*法.{1}所用名稱\s*(.*?)(地址|Branch Name)', re.DOTALL)
        match_upper = pattern.search(joined_line)
        if match_upper:
            # Extract the text between the specified keywords
            company_name_text = match_upper.group(1).strip()

            # Remove any unwanted characters or terms from the extracted text
            company_name_text = re.sub(r'[\u4e00-\u9fff]+|[\s]{2,}|(NAME OF BUSINESS! CORPORATION|NAME OF BUSINESS/ CORPORATION)', ' ', company_name_text)

            # Split the text into words, and filter out any words that are not fully uppercase
            uppercase_words = [word for word in company_name_text.split() if word.isupper()]
            # Join the uppercase words back together to form the company name
            company_name = ' '.join(uppercase_words)
            if company_name:  # Check if any uppercase words were found
                        break  # Exit the loop if a company name is found
        else:
            logging.debug(f'Company name pattern not matched in: {joined_line}')

    # Check if the BR number pattern is XXX-XX-XXXXX before translating
    if re.match(r'\d{3}-\d{2}-\d{5}', br_number):
        # Check if (Eng) is already in the doc_path to avoid multiple (Eng) in the file name
        if '(Eng)' not in doc_path:
            translated_doc_path = os.path.splitext(doc_path)[0] + "(Eng).docx"
        else:
            translated_doc_path = doc_path  # use the existing doc_path if (Eng) is already there
        
        # Only translate and save if translated_doc_path is different from doc_path and doesn't already exist
        if translated_doc_path != doc_path and not os.path.exists(translated_doc_path):
            translated_doc = Document()  # Create a new Document for the translated text
            for para in doc.paragraphs:
                if para.text:
                    result = translate_client.translate(para.text, target_language='en')  # Translate the text
                    translated_text = result['translatedText']
                    translated_doc.add_paragraph(translated_text)  # Add translated text to the new Document
            translated_doc.save(translated_doc_path)  # Save the translated document
    else:
        translated_doc_path = ""  # If BR number pattern is not matched, set translated_doc_path as empty string

    return br_number, company_name, company_address, expiry_date, translated_doc_path  # Return translated_doc_path



def analyze_general_documents(input_folder, output_folder, excel_file):
    translated_doc_path = ""  # Initialize to empty string
    row_index = 1  # Initialize row_index to 1 or another appropriate value
    document_analysis_client = DocumentAnalysisClient(endpoint=endpoint, credential=AzureKeyCredential(key))
    wb = openpyxl.Workbook()
    ws = wb.active
    # Ensure the following line is correctly indented
    ws.append(["BR Number", "Company Name", "Company Address", "Expiry Date", "Original File Name", "Original Source", "BR Page", "Text Conversion", "Text Translation in Eng"])  # Updated headers



    ws.cell(row=row_index, column=9).hyperlink = translated_doc_path  # Updated column index

    ws_skipped = wb.create_sheet("Skipped Files")
    ws_skipped.append(["File Name", "Original Source", "Reason"])

    for root, dirs, files in os.walk(input_folder):
        files = sorted(files, reverse=True)

        for file in files:
            file_path = os.path.join(root, file)
            file_ext = os.path.splitext(file)[1]
            output_file_path = os.path.join(output_folder, os.path.splitext(file)[0] + ".docx")

            if os.path.exists(output_file_path):
                print(f"File {file} already exists in the output folder. Skipping...")
                continue

            file_size = os.path.getsize(file_path)
            if file_size > 4 * 1024 * 1024:
                print(f"File {file} is larger than 4MB. Skipping...")
                ws_skipped.append([file, file_path, "File size larger than 4MB"])
                continue

            print(f"Processing {file}...")
            if file_ext.lower() in [".pdf", ".jpg", ".png", ".jpeg"]:
                try:
                    with open(file_path, "rb") as f:
                        poller = document_analysis_client.begin_analyze_document("prebuilt-document", f)
                        result = poller.result()
                        doc = Document()
                        for page in result.pages:
                            for line in page.lines:
                                doc.add_paragraph(line.content)
                        doc.save(output_file_path)
                except Exception as e:
                    print(f"Error processing {file}: {str(e)}")
                    ws_skipped.append([file, file_path, str(e)])

    for file in os.listdir(output_folder):
        # Skip temporary files
        if file.startswith('~$'):
            continue

        if file.endswith('.docx') and not file.endswith('(Eng).docx'):

            file_path = os.path.join(output_folder, file)
            original_file_name = os.path.splitext(file)[0]
            original_file_path = os.path.join(input_folder, original_file_name)
            original_file_name_without_extension = os.path.splitext(original_file_name)[0]

            for ext in ['.pdf', '.png', '.jpg', '.jpeg']:
                if os.path.exists(original_file_path + ext):
                    original_file_path += ext
                    break

            br_number, company_name, company_address, expiry_date, translated_doc_path = extract_data_from_word(file_path)
            if br_number is None:
                print(f"Skipping {file_path} due to Bad Zip File or Corrupted Document error.")
                continue  # skip to the next file            
            # If a translated doc exists, use its path. If not, use the original file_path
            final_file_path = translated_doc_path if os.path.exists(translated_doc_path) else file_path

            # Remove 'docx_address' from the following line
            ws.append([br_number, company_name, company_address, expiry_date, original_file_name_without_extension, original_file_path, "-", file_path, translated_doc_path])

            row_index = ws.max_row  # get the index of the last row

        # Add light grey fill if company name and expiry date are None
        if company_name is None and expiry_date is None:
            ws.cell(row=row_index, column=2).fill = light_grey_fill  # Company Name cell
            ws.cell(row=row_index, column=4).fill = light_grey_fill  # Expiry Date cell
            ws.cell(row=row_index, column=3).fill = light_grey_fill  # Company Address cell

            if company_name == "No Match Found":
                for col in range(1, 7):  # Assuming company name is within the first 6 columns
                    cell = ws.cell(row=row_index, column=col)
                    ws.cell(row=row_index, column=2).font = red_font  # Apply red font to Company Name cell


            # Add hyperlinks
            ws.cell(row=row_index, column=6).hyperlink = original_file_path  # Column F
            ws.cell(row=row_index, column=8).hyperlink = file_path          # Column H
            ws.cell(row=row_index, column=9).hyperlink = translated_doc_path  # Column J

    wb.save(excel_file)

def convert_image_pdf_to_word():
    update_status("Processing...")
    input_folder = entry_input_folder.get()
    output_folder = entry_output_folder.get()
    excel_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "HK BR Data.xlsx")
    analyze_general_documents(input_folder, output_folder, excel_file)
    update_status("Done!")

window = tk.Tk()
window.title("PDF to Word Converter")

label_input_folder = tk.Label(window, text="Input Folder:")
label_input_folder.pack()

entry_input_folder = tk.Entry(window, width=50)
entry_input_folder.pack()

button_select_input_folder = tk.Button(window, text="Select", command=select_input_folder)
button_select_input_folder.pack()

label_output_folder = tk.Label(window, text="Output Folder:")
label_output_folder.pack()

entry_output_folder = tk.Entry(window, width=50)
entry_output_folder.pack()

button_select_output_folder = tk.Button(window, text="Select", command=select_output_folder)
button_select_output_folder.pack()

button_convert = tk.Button(window, text="Convert", command=convert_image_pdf_to_word)
button_convert.pack()

label_status = tk.Label(window, text="")
label_status.pack()

window.mainloop()
