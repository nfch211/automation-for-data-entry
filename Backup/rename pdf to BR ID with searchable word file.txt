import os
import tkinter as tk
from tkinter import filedialog, messagebox
from docx import Document
import pandas as pd
from difflib import SequenceMatcher
import re

def select_pdf_folder():
    pdf_folder_path = filedialog.askdirectory(title="Select PDF Folder")
    if pdf_folder_path:
        entry_pdf_folder.delete(0, tk.END)
        entry_pdf_folder.insert(tk.END, pdf_folder_path)

def select_word_folder():
    word_folder_path = filedialog.askdirectory(title="Select Word Folder")
    if word_folder_path:
        entry_word_folder.delete(0, tk.END)
        entry_word_folder.insert(tk.END, word_folder_path)

def select_output_folder():
    output_folder_path = filedialog.askdirectory(title="Select Output Folder")
    if output_folder_path:
        entry_output.delete(0, tk.END)
        entry_output.insert(tk.END, output_folder_path)

def import_excel_list():
    excel_path = filedialog.askopenfilename(title="Import Excel List", filetypes=[("Excel Files", "*.xlsx;*.xls")])
    if excel_path:
        entry_excel.delete(0, tk.END)
        entry_excel.insert(tk.END, excel_path)

def custom_similarity(id1, id2):
    same_char_count = sum((c1 == c2) for c1, c2 in zip(id1, id2))
    return same_char_count / len(id1)

def fuzzy_match(content, id_list, threshold):
    best_match = None
    best_score = 0
    for id in id_list:
        score = custom_similarity(content, id)
        if score > best_score:
            best_match = id
            best_score = score
    if best_match and best_score >= threshold:
        return best_match
    return None

def rename_files_with_ids():
    pdf_folder_path = entry_pdf_folder.get()
    word_folder_path = entry_word_folder.get()
    output_folder_path = entry_output.get()
    excel_path = entry_excel.get()

    if not pdf_folder_path or not word_folder_path or not output_folder_path or not excel_path:
        messagebox.showerror("Error", "Please select the PDF folder, Word folder, output folder, and import the Excel list.")
        return

    # Create the output folder if it doesn't exist
    os.makedirs(output_folder_path, exist_ok=True)

    # Read the Excel list of IDs
    try:
        df = pd.read_excel(excel_path)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to read the Excel list. Error: {str(e)}")
        return

    # Get the IDs from the Excel list
    id_list = df["ID"].tolist()

    # Loop through Word files in the Word folder
    for word_filename in os.listdir(word_folder_path):
        word_file = os.path.join(word_folder_path, word_filename)
        if os.path.isfile(word_file) and word_filename.endswith(".docx"):
            # Extract the file name without extension
            word_filename_without_ext = os.path.splitext(word_filename)[0]

            # Find the corresponding PDF file
            pdf_file = os.path.join(pdf_folder_path, f"{word_filename_without_ext}.pdf")
            jpg_file = os.path.join(pdf_folder_path, f"{word_filename_without_ext}.jpg")

            if not os.path.exists(pdf_file) and not os.path.exists(jpg_file):
                print(f"No corresponding PDF or JPG file found for '{word_filename}'. Skipping...")
                continue

            # Read the Word file
            try:
                doc = Document(word_file)
                content = " ".join([paragraph.text for paragraph in doc.paragraphs])
            except Exception as e:
                print(f"Failed to read Word file '{word_file}': {str(e)}")
                continue

            # Find the matching ID in the content
            matching_id = None
            for id in id_list:
                if id in content:
                    matching_id = id
                    print(f"Found ID '{id}' in Word file '{word_filename}'")  # Print the ID
                    break

            remark = ""
            if matching_id is None:
                print(f"No matching ID found in Word file '{word_filename}'. Trying to find a similar ID...")

                # Using custom similarity function for fuzzy matching
                matching_id = fuzzy_match(content, id_list, threshold=0.8)

                if matching_id:
                    print(f"Found similar ID '{matching_id}'")
                    remark = "_fuzzy_match"

            if matching_id is not None:
                print(f"Using ID '{matching_id}' for Word file '{word_filename}'")
                # Rename the PDF file using the matching ID
                if os.path.exists(pdf_file):
                    new_pdf_name = f"{matching_id}{remark}.pdf"
                    new_pdf_path = os.path.join(output_folder_path, new_pdf_name)

                    # Handle duplicate file names
                    count = 1
                    while os.path.exists(new_pdf_path):
                        base_name, extension = os.path.splitext(new_pdf_name)
                        new_pdf_name = f"{base_name}_{count}{extension}"
                        new_pdf_path = os.path.join(output_folder_path, new_pdf_name)
                        count += 1

                    # Rename the PDF file
                    try:
                        os.rename(pdf_file, new_pdf_path)
                        print(f"Renamed PDF file '{pdf_file}' to '{new_pdf_name}'")
                    except Exception as e:
                        print(f"Failed to rename PDF file '{pdf_file}': {str(e)}")
                        continue

                # Rename the JPG file using the matching ID
                if os.path.exists(jpg_file):
                    new_jpg_name = f"{matching_id}{remark}.jpg"
                    new_jpg_path = os.path.join(output_folder_path, new_jpg_name)

                    # Handle duplicate file names
                    count = 1
                    while os.path.exists(new_jpg_path):
                        base_name, extension = os.path.splitext(new_jpg_name)
                        new_jpg_name = f"{base_name}_{count}{extension}"
                        new_jpg_path = os.path.join(output_folder_path, new_jpg_name)
                        count += 1

                    # Rename the JPG file
                    try:
                        os.rename(jpg_file, new_jpg_path)
                        print(f"Renamed JPG file '{jpg_file}' to '{new_jpg_name}'")
                    except Exception as e:
                        print(f"Failed to rename JPG file '{jpg_file}': {str(e)}")
                        continue

    messagebox.showinfo("Renaming Complete", "Files renamed successfully.")

# Create the Tkinter window
window = tk.Tk()
window.title("File Renamer")

# Create and place the PDF folder selection widgets
label_pdf_folder = tk.Label(window, text="Select PDF Folder:")
label_pdf_folder.pack()

entry_pdf_folder = tk.Entry(window, width=50)
entry_pdf_folder.pack()

button_select_pdf_folder = tk.Button(window, text="Select", command=select_pdf_folder)
button_select_pdf_folder.pack()

# Create and place the Word folder selection widgets
label_word_folder = tk.Label(window, text="Select Word Folder:")
label_word_folder.pack()

entry_word_folder = tk.Entry(window, width=50)
entry_word_folder.pack()

button_select_word_folder = tk.Button(window, text="Select", command=select_word_folder)
button_select_word_folder.pack()

# Create and place the output folder selection widgets
label_output = tk.Label(window, text="Select Output Folder:")
label_output.pack()

entry_output = tk.Entry(window, width=50)
entry_output.pack()

button_select_output = tk.Button(window, text="Select", command=select_output_folder)
button_select_output.pack()

# Create the import Excel list widgets
label_excel = tk.Label(window, text="Import Excel List:")
label_excel.pack()

entry_excel = tk.Entry(window, width=50)
entry_excel.pack()

button_import_excel = tk.Button(window, text="Import", command=import_excel_list)
button_import_excel.pack()

# Create the rename button
button_rename = tk.Button(window, text="Rename Files", command=rename_files_with_ids)
button_rename.pack()

# Start the Tkinter event loop
window.mainloop()
