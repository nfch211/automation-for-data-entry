import openpyxl
import PyPDF2
import img2pdf
import tkinter as tk
from tkinter import filedialog
import io
import urllib.parse

def combine_files_into_pdf(file_list, output_folder, output_filename):
    pdf_writer = PyPDF2.PdfWriter()

    for file_path in file_list:
        if file_path.endswith('.pdf'):
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page_num in range(len(pdf_reader.pages)):
                    pdf_writer.add_page(pdf_reader.pages[page_num])
        else:  # for PNG and JPG
            pdf_bytes = img2pdf.convert(file_path)
            buffer = io.BytesIO(pdf_bytes)  # Convert bytes to file-like byte stream
            pdf_reader = PyPDF2.PdfReader(buffer)
            for page_num in range(len(pdf_reader.pages)):
                pdf_writer.add_page(pdf_reader.pages[page_num])

    combined_pdf_path = f"{output_folder}/{output_filename}"
    with open(combined_pdf_path, 'wb') as out:
        pdf_writer.write(out)

    return combined_pdf_path

def process_excel_file(excel_file, output_folder):
    wb = openpyxl.load_workbook(excel_file)
    
    # Target the "Sheet" specifically
    original_ws = wb["Sheet"]

    red_files = []
    normal_files = []

    for row in original_ws.iter_rows(min_row=2):
        # Check if the row has at least 5 columns
        if len(row) < 5:
            continue

        original_file_path = urllib.parse.unquote(row[3].hyperlink.target) if row[3].hyperlink else None
        br_page_path = urllib.parse.unquote(row[4].hyperlink.target) if row[4].hyperlink else None

        if not original_file_path or not br_page_path:
            continue

        if "No Match Found" in row[1].value or "No Match Found" in row[2].value:
            red_files.append(br_page_path)
        else:
            normal_files.append(br_page_path)

    combined_red_pdf_path = combine_files_into_pdf(red_files, output_folder, 'combined_red.pdf')
    combined_normal_pdf_path = combine_files_into_pdf(normal_files, output_folder, 'combined_normal.pdf')

    # Add combined PDF paths to the new "BR Check" sheet in the original workbook
    if "BR Check" in wb.sheetnames:
        ws = wb["BR Check"]
    else:
        ws = wb.create_sheet("BR Check")

    # Insert the descriptions
    ws.cell(row=1, column=1, value="Combined RED PDFs")
    ws.cell(row=3, column=1, value="Combined Normal PDFs")
    
    # Insert the hyperlinks
    link_cell = ws.cell(row=2, column=1)
    link_cell.value = combined_red_pdf_path
    link_cell.hyperlink = combined_red_pdf_path
    
    link_cell = ws.cell(row=4, column=1)
    link_cell.value = combined_normal_pdf_path
    link_cell.hyperlink = combined_normal_pdf_path
    
    # Save the changes back to the original Excel file
    wb.save(excel_file)

    print(f"\nProcessed Excel file saved: {excel_file}")

def select_file_and_folder():
    root = tk.Tk()
    root.withdraw()  # Hide the main window

    excel_file_path = filedialog.askopenfilename(title="Select Excel file", filetypes=[("Excel files", "*.xlsx")])
    output_folder = filedialog.askdirectory(title="Select folder to save BR pdf files")

    root.destroy()

    return excel_file_path, output_folder

if __name__ == "__main__":
    excel_file_path, output_folder = select_file_and_folder()

    if excel_file_path and output_folder:
        process_excel_file(excel_file_path, output_folder)
