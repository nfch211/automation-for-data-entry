import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PyPDF2 import PdfReader, PdfWriter, errors
from shutil import copyfile
from pathlib import Path

def cancel_operation():
    window.quit()  # Close the tkinter window

def select_pdf_folder():
    pdf_folder_path = filedialog.askdirectory(title="Select Folder")
    if pdf_folder_path:
        entry_pdf_folder.delete(0, tk.END)
        entry_pdf_folder.insert(tk.END, pdf_folder_path)

def select_output_folder():
    output_folder_path = filedialog.askdirectory(title="Select Output Folder")
    if output_folder_path:
        entry_output.delete(0, tk.END)
        entry_output.insert(tk.END, output_folder_path)

def switch_file_positions(original_path, extracted_path, pdf_folder_path):
    temp_path = os.path.join(pdf_folder_path, "temp_file.pdf")
    copyfile(original_path, temp_path)
    copyfile(extracted_path, original_path)
    copyfile(temp_path, extracted_path)
    os.remove(temp_path)

    # Deduce the mother folder and attempt to remove corresponding .docx files
    mother_folder = os.path.dirname(pdf_folder_path)
    original_filename_without_ext = os.path.splitext(os.path.basename(original_path))[0]
    
    # Search for the .docx files in the mother folder and its subfolders
    for docx_file in Path(mother_folder).rglob(original_filename_without_ext + ".docx"):
        potential_docx_path = str(docx_file)
        print(f"Trying to delete: {potential_docx_path}")
        if os.path.exists(potential_docx_path):
            try:
                os.remove(potential_docx_path)
                print(f"Successfully deleted: {potential_docx_path}")
            except Exception as e:
                print(f"Failed to delete {potential_docx_path}. Reason: {e}")
        else:
            print(f"File {potential_docx_path} does not exist.")

def extract_pages_by_user_comment():
    pdf_folder_path = entry_pdf_folder.get()
    output_folder_path = entry_output.get()

    if not pdf_folder_path or not output_folder_path:
        messagebox.showerror("Error", "Please select the folder and output folder.")
        return

    extracted_info = []

    for filename in os.listdir(pdf_folder_path):
        file_path = os.path.join(pdf_folder_path, filename)
        if os.path.isfile(file_path) and filename.endswith(".pdf"):
            output_file_path = os.path.join(output_folder_path, filename)
            try:
                pdf_reader = PdfReader(file_path)
                output_pdf_writer = PdfWriter()
                has_extracted_page = False
                
                for page_num, page in enumerate(pdf_reader.pages):
                    annotations = page.get('/Annots')
                    if annotations:
                        annotations = annotations.get_object()
                        if isinstance(annotations, list):
                            for annotation in annotations:
                                resolved_annotation = annotation.get_object()
                                annot_content = resolved_annotation.get("/Contents", "")
                                annot_author = resolved_annotation.get("/T", "")

                                if "BR" in annot_content and annot_author == "hofong":
                                    output_pdf_writer.add_page(page)
                                    extracted_info.append(f"Extracted page {page_num+1} from {filename} with comment containing 'BR' by user 'hofong'")
                                    has_extracted_page = True
                                    break

                if has_extracted_page:
                    with open(output_file_path, "wb") as output_pdf_file:
                        output_pdf_writer.write(output_pdf_file)

                    switch_file_positions(file_path, output_file_path, pdf_folder_path)

            except errors.PdfReadError as pdf_error:
                if "EOF marker not found" in str(pdf_error):
                    extracted_info.append(f"The PDF '{filename}' seems to be corrupted or not a valid PDF.")
                else:
                    extracted_info.append(f"Failed to process PDF '{filename}' due to error: {pdf_error}")
            except Exception as e:
                extracted_info.append(f"Failed to process file '{file_path}': {str(e)}")
                import traceback
                traceback.print_exc()  # This will print the exception details in the console for further debugging

    info_str = "\n".join(extracted_info)
    messagebox.showinfo("Extraction Complete", f"Pages with comments containing 'BR' by user 'hofong' extracted successfully.\n\n{info_str}")
    window.destroy()

# Create the Tkinter window
window = tk.Tk()
window.title("Pages by User Comment Extractor")

label_pdf_folder = tk.Label(window, text="Select Folder:")
label_pdf_folder.pack()

entry_pdf_folder = tk.Entry(window, width=50)
entry_pdf_folder.pack()

button_select_pdf_folder = tk.Button(window, text="Select", command=select_pdf_folder)
button_select_pdf_folder.pack()

label_output = tk.Label(window, text="Select Output Folder:")
label_output.pack()

entry_output = tk.Entry(window, width=50)
entry_output.pack()

button_select_output = tk.Button(window, text="Select", command=select_output_folder)
button_select_output.pack()

button_extract = tk.Button(window, text="Extract Pages with Comment 'BR' by 'hofong'", command=extract_pages_by_user_comment)
button_extract.pack()

button_cancel = tk.Button(window, text="Cancel", command=cancel_operation)
button_cancel.pack()

window.mainloop()
