import random
import time
import pickle
import re
import os
import pandas as pd
from tkinter import Tk
from tkinter.filedialog import askopenfilename, askdirectory

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from bs4 import BeautifulSoup

def load_cookies(driver, url):
    try:
        driver.get(url)  # navigate to the site first before loading cookies
        cookies = pickle.load(open(r"C:\Users\hofong\Desktop\python\企查猫\cookies\cookies.pkl", "rb"))
        for cookie in cookies:
            driver.add_cookie(cookie)
        print("Cookies loaded successfully.")
        return True
    except FileNotFoundError:
        print("Cookie file not found. You will need to log in.")
        return False

def save_cookies(driver):
    pickle.dump(driver.get_cookies() , open(r"C:\Users\hofong\Desktop\python\企查猫\cookies\cookies.pkl","wb"))
    print("Cookies saved successfully.")

Tk().withdraw()
excel_filename = askopenfilename()  # show an "Open" dialog box and return the path to the selected file
output_folder = askdirectory()  # show a "Choose Directory" dialog box and return the path to the selected directory
output_filename = os.path.join(output_folder, "output.xlsx")

if os.path.exists(output_filename):
    df_output = pd.read_excel(output_filename)
else:
    df_output = pd.DataFrame(columns=['BR Number', 'Company Name', 'Company Address'])

df = pd.read_excel(excel_filename)

chrome_binary_location = r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
chrome_driver_path = r'C:\Users\hofong\Desktop\python\企查猫\chromedriver.exe'

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36",
    "Mozilla/5.0 (Windows NT 5.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"
]

user_agent = random.choice(user_agents)
chrome_options = webdriver.ChromeOptions()
chrome_options.binary_location = chrome_binary_location
chrome_options.add_argument(f'user-agent={user_agent}')
chrome_options.add_argument("--log-level=3")  # Suppress all messages except fatal errors
chrome_options.add_argument("--headless")

driver = webdriver.Chrome(service=Service(chrome_driver_path), options=chrome_options)

if not load_cookies(driver, 'https://www.qichamao.com/'):
    chrome_options = webdriver.ChromeOptions()  # create a new Options object
    chrome_options.binary_location = chrome_binary_location
    chrome_options.add_argument(f'user-agent={user_agent}')
    chrome_options.add_argument("--log-level=3")  # Suppress all messages except fatal errors

    driver = webdriver.Chrome(service=Service(chrome_driver_path), options=chrome_options)
    driver.get('https://www.qichamao.com/')

    print("Please perform the login manually in the web browser that just opened.")
    print("Once you are logged in successfully, come back to the terminal and press Enter to continue...")
    input()

    save_cookies(driver)
    driver.quit()

    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(service=Service(chrome_driver_path), options=chrome_options)
    load_cookies(driver, 'https://www.qichamao.com/')  # the cookies are loaded after navigating to the correct page

driver.get('https://www.qichamao.com/')

for index, row in df.iterrows():
    br_number = str(row['BR Number']).strip()
    
    if br_number in df_output['BR Number'].values:
        print(f"BR number {br_number} has already been processed.")
        continue

    if br_number == '':
        print("Invalid BR number. Please enter a valid BR number.")
        continue

    data_url = f'https://www.qichamao.com/search/all/{br_number}'
    driver.get(data_url)

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))

    page_source = driver.page_source
    soup = BeautifulSoup(page_source, 'html.parser')

    company_name = soup.find('a', class_='listsec_tit')
    company_name_str = company_name.text.strip() if company_name else "N/A"

    company_address = soup.find('span', string=re.compile('企业地址：'))
    company_address_str = company_address.text.strip().replace('企业地址：', '') if company_address else "N/A"
    
    new_row = pd.DataFrame({'BR Number': [br_number], 'Company Name': [company_name_str], 'Company Address': [company_address_str]})
    df_output = pd.concat([df_output, new_row], ignore_index=True)
    print(f"Processed BR number {br_number}.")

    if index % 100 == 99:
        time.sleep(5)

    df_output.to_excel(output_filename, index=False)

driver.quit()
