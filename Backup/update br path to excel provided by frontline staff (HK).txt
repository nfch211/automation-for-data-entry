import openpyxl
from tkinter import Tk, filedialog
from fuzzywuzzy import fuzz, process
from openpyxl.styles import Font, Border, Side

def load_br_link_map():
    source_excel_path = "HK BR Data.xlsx"
    wb = openpyxl.load_workbook(source_excel_path)
    ws = wb.active

    br_link_map = {}
    business_name_map = set()

    for row in ws.iter_rows(min_row=2, values_only=True):
        br_number = row[2][:8]
        source = row[4]
        expiry_date = row[1]
        business_name = row[0].lower()
        
        br_link_map[br_number] = (source, expiry_date)
        business_name_map.add(business_name)

    return br_link_map, business_name_map

def normalize_business_name(name):
    words_to_ignore = ["company", "limited", "co.", "ltd", "&", ".", " ", ",", "-"]
    normalized = name.lower()
    for word in words_to_ignore:
        normalized = normalized.replace(word, "")
    return normalized

def update_excel_hyperlinks(target_excel_path, br_link_map, business_name_map, business_name_to_actual):
    wb = openpyxl.load_workbook(target_excel_path)
    ws = wb.active

    red_font = Font(color="FF0000")

    rows_updated = 0
    for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        br_number = str(row[4])

        print(f"Checking BR number from target Excel: {br_number}...")
        
        if len(br_number) == 8 and br_number in br_link_map:
            print(f"Updating BR number: {br_number}...")
            source_link, expiry_date = br_link_map[br_number]

            cell = ws.cell(row=idx, column=5)
            cell.hyperlink = source_link

            expiry_cell = ws.cell(row=idx, column=8)
            expiry_cell.value = expiry_date
            cell.style = "Hyperlink"

            border = Border(left=Side(border_style="thin"),
                            right=Side(border_style="thin"),
                            top=Side(border_style="thin"),
                            bottom=Side(border_style="thin"))
            cell.border = border



            rows_updated += 1

        else:
            # No valid BR number found, do not perform fuzzy matching for this row
            print(f"No BR number found for: {br_number}. Skipping fuzzy matching.")
            continue

        business_name = str(row[2])
        normalized_business_name = normalize_business_name(business_name)
        
        best_match, score = process.extractOne(normalized_business_name, business_name_to_actual.keys())
        actual_business_name = business_name_to_actual[best_match]  # make sure this line is at the same indentation level as the previous line
        
        
        if score < 90:
            print(f"No exact match found for: {business_name}. Changing font color to red.")
            cell = ws.cell(row=idx, column=3)
            cell.font = red_font
        else:
            print(f"Matching Business Name found: {actual_business_name}. Keeping the font color unchanged.")

    wb.save(target_excel_path)
    print(f"Update complete. Updated {rows_updated} rows.")

if __name__ == "__main__":
    br_link_map, business_name_map = load_br_link_map()

    # Create a mapping of normalized business names to actual business names
    business_name_to_actual = {}
    for business_name in business_name_map:
        normalized_name = normalize_business_name(business_name)
        business_name_to_actual[normalized_name] = business_name
    
    root = Tk()
    root.withdraw()

    target_excel_path = filedialog.askopenfilename(title="Select the Excel file to update", filetypes=[("Excel files", "*.xlsx;*.xlsm")])
    if not target_excel_path:
        print("No file selected. Exiting...")
        exit()

    update_excel_hyperlinks(target_excel_path, br_link_map, business_name_map, business_name_to_actual)
    print("Hyperlinks and Expiry Dates updated successfully.")