import os
import re
import tkinter as tk
from tkinter import filedialog
from azure.ai.formrecognizer import DocumentAnalysisClient
from azure.core.credentials import AzureKeyCredential
from docx import Document
import openpyxl
import docx2txt
import subprocess
from tkinter import messagebox
import sys  # Don't forget to import sys
import tempfile

def combine_pdfs(file_list, output_name):
    pdf_writer = PyPDF2.PdfFileWriter()

    for file in file_list:
        pdf_reader = PyPDF2.PdfFileReader(file)
        for page_num in range(pdf_reader.getNumPages()):
            pdf_writer.addPage(pdf_reader.getPage(page_num))

    with open(output_name, 'wb') as pdf_output:
        pdf_writer.write(pdf_output)

def prompt_and_execute_c():
    response = messagebox.askokcancel("Execute C.py", "Do you want to generate full pdfs in order to check BR for errors?")
    if response:  # User clicked 'OK'
        print("Running C.py...")
        subprocess.run(["python", "C.py"])
    # If 'Cancel' is clicked or window is closed, do nothing

def on_close():
    """Function to be called when the main window closes."""
    prompt_and_execute_c()
    window.destroy()  # Close the GUI

def run_w_and_continue():
    # Clear the cancel flag file if it exists from previous runs
    cancel_flag_path = tempfile.gettempdir() + "/cancel_flag.txt"
    if os.path.exists(cancel_flag_path):
        os.remove(cancel_flag_path)

    subprocess.run(["python", "w.py"])

    # Check if w.py was canceled
    if os.path.exists(cancel_flag_path):
        print("w.py was canceled")
        os.remove(cancel_flag_path)  # Clean up the cancel flag file
        sys.exit()  # Exit the entire script

    print("w.py has finished running. Continuing with the rest of the script in T.py...")
    # Your existing code to continue with T.py heree

# Run w.py and continue with the script
run_w_and_continue()


# Set your endpoint and key variables with the values from the Azure portal
endpoint = "https://hktdcbr.cognitiveservices.azure.com/"
key = "28ff496d762e4b5e8a6beecaabd61392"

def get_selected_path():
    try:
        with open("selected_path.txt", "r") as f:
            return f.readline().strip()
    except FileNotFoundError:
        print("Error: 'selected_path.txt' not found.")
        sys.exit()


SELECTED_PATH = get_selected_path()

def get_file_name_without_ext(file_name):
    return os.path.splitext(file_name)[0]
	
def update_status(status):
    label_status.config(text=status)
    window.update_idletasks()

def select_input_folder():
    print("Selecting input folder...")
    input_folder = filedialog.askdirectory(title="Select Input Folder")
    if input_folder:
        entry_input_folder.delete(0, tk.END)
        entry_input_folder.insert(tk.END, input_folder)
    print(f"Selected input folder: {input_folder}")

def select_output_folder():
    print("Selecting output folder...")
    output_folder = filedialog.askdirectory(title="Select Output Folder")
    if output_folder:
        entry_output_folder.delete(0, tk.END)
        entry_output_folder.insert(tk.END, output_folder)
    print(f"Selected output folder: {output_folder}")

def extract_data_from_doc(doc_path):
    print(f"Extracting data from: {doc_path}")
    text = docx2txt.process(doc_path)
    br_numbers = re.findall(r'9(?:[A-Z\d]\s?){17}|4\d{14}', text, re.MULTILINE)
    br_numbers = [number.replace(" ", "") for number in br_numbers]  # Remove spaces
    company_names = re.findall(r'[^称]*?(\S*公司)', text)
    longest_company_name = max(company_names, key=len, default="")
    return br_numbers, [longest_company_name] if longest_company_name else []

def analyze_general_documents(input_folder, output_folder, excel_file):
    print("Analyzing general documents...")
    document_analysis_client = DocumentAnalysisClient(endpoint=endpoint, credential=AzureKeyCredential(key))

    # Create a new Excel workbook and setup the main and skipped sheets
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["BR Number", "Company Name", "Company Address", "Original File Name", "Original Source", "BR Page", "BR Text Conversion"])

    ws_skipped = wb.create_sheet("Skipped Files")
    ws_skipped.append(["File Name", "Active Path", "Reason"])

    processed_files = set()
    skipped_files = set()

    # Process the input files
    for root, dirs, files in os.walk(input_folder):
        for file in files:
            print(f"Processing file: {file}")
            file_path = os.path.join(root, file)
            output_file_path = os.path.join(output_folder, get_file_name_without_ext(file) + ".docx")

            if os.path.exists(output_file_path):
                continue

            file_size = os.path.getsize(file_path)
            if file_size > 4 * 1024 * 1024:
                ws_skipped.append([file, file_path, "File size larger than 3MB"])
                skipped_files.add(get_file_name_without_ext(file))
                continue

            if file.endswith(('.pdf', '.jpg', '.png')):
                try:
                    with open(file_path, "rb") as f:
                        poller = document_analysis_client.begin_analyze_document("prebuilt-document", f)
                        result = poller.result()
                        doc = Document()
                        for page in result.pages:
                            for line in page.lines:
                                doc.add_paragraph(line.content)
                        doc.save(output_file_path)
                        processed_files.add(get_file_name_without_ext(file))
                except Exception as e:
                    ws_skipped.append([file, file_path, str(e)])
                    skipped_files.add(get_file_name_without_ext(file))

    # Calculate the missed_files
    all_input_files = {get_file_name_without_ext(file) for root, dirs, files in os.walk(input_folder) for file in files}
    sheet_original_files = set(ws.cell(row=row, column=3).value for row in range(2, ws.max_row + 1))  # Assuming "Original File Name" is in column 3
    skipped_files = set(ws_skipped.cell(row=row, column=1).value for row in range(2, ws_skipped.max_row + 1))  # Assuming "File Name" is in column 1

    missed_files = (sheet_original_files | skipped_files) - (all_input_files | skipped_files)

    if missed_files:
        ws_missed = wb.create_sheet("Missed Files")
        ws_missed.append(["File Name", "Reason"])
        for file in missed_files:
            ws_missed.append([file, "Missed during processing"])

    # Extract data from the .docx files and populate the Excel sheet
    for file in os.listdir(output_folder):
        if file.endswith('.docx'):
            print(f"Processing .docx file: {file}")
            original_file_name = get_file_name_without_ext(file)
            file_path = os.path.join(output_folder, file)
            
            original_file_extension = next((ext for ext in ['.pdf', '.png', '.jpg'] if os.path.exists(os.path.join(input_folder, original_file_name + ext))), None)
            if original_file_extension:
                original_file_path_with_ext = os.path.join(SELECTED_PATH, original_file_name + original_file_extension)
                br_page_path_with_ext = os.path.join(input_folder, original_file_name + original_file_extension)
                
                br_numbers, company_names = extract_data_from_doc(file_path)
                business_name = company_names[0] if company_names else "No Match Found"
                br_number = br_numbers[0] if br_numbers else "No Match Found"
                ws.append([br_number, "", "", original_file_name, original_file_path_with_ext, br_page_path_with_ext, file_path])

                row_index = ws.max_row
                ws.cell(row=row_index, column=5).hyperlink = original_file_path_with_ext
                ws.cell(row=row_index, column=6).hyperlink = br_page_path_with_ext
                ws.cell(row=row_index, column=7).hyperlink = file_path

                if business_name == "No Match Found" or br_number == "No Match Found":
                    red_font = openpyxl.styles.Font(color="FF0000")
                    for col in range(1, 7):
                        cell = ws.cell(row=row_index, column=col)
                        if col not in [4, 5, 6]:  # Skip columns with hyperlinks
                            cell.font = red_font


    print(f"Saving excel file to: {excel_file}")
    wb.save(excel_file)
    print("Excel file saved successfully.")


def convert_image_pdf_to_word():
    print("Conversion process started...")
    update_status("Processing...")
    input_folder = entry_input_folder.get()
    output_folder = entry_output_folder.get()
    excel_file_name = "CN BR Data.xlsx"
    excel_file_path = os.path.join(os.path.dirname(__file__), excel_file_name)
    analyze_general_documents(input_folder, output_folder, excel_file_path)
    update_status("Done!")
    print("Conversion process completed.")

window = tk.Tk()
window.title("PDF to Word Converter")

label_input_folder = tk.Label(window, text="Input Folder:")
label_input_folder.pack()

entry_input_folder = tk.Entry(window, width=50)
entry_input_folder.pack()

button_select_input_folder = tk.Button(window, text="Select", command=select_input_folder)
button_select_input_folder.pack()

label_output_folder = tk.Label(window, text="Output Folder:")
label_output_folder.pack()

entry_output_folder = tk.Entry(window, width=50)
entry_output_folder.pack()

button_select_output_folder = tk.Button(window, text="Select", command=select_output_folder)
button_select_output_folder.pack()

button_convert = tk.Button(window, text="Convert", command=convert_image_pdf_to_word)
button_convert.pack()

label_status = tk.Label(window, text="")
label_status.pack()

window.protocol("WM_DELETE_WINDOW", on_close)

window.mainloop()
