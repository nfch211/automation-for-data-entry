import os
import tkinter as tk
from tkinter import filedialog
from azure.ai.formrecognizer import DocumentAnalysisClient
from azure.core.credentials import AzureKeyCredential
from docx import Document
import openpyxl
import re

# Set your endpoint and key variables with the values from the Azure portal
endpoint = "https://hktdc01.cognitiveservices.azure.com/"
key = "bc335390e203490290af68395a098b26"

def update_status(status):
    label_status.config(text=status)
    window.update_idletasks()

def select_input_folder():
    input_folder = filedialog.askdirectory(title="Select Input Folder")
    if input_folder:
        entry_input_folder.delete(0, tk.END)
        entry_input_folder.insert(tk.END, input_folder)

def select_output_folder():
    output_folder = filedialog.askdirectory(title="Select Output Folder")
    if output_folder:
        entry_output_folder.delete(0, tk.END)
        entry_output_folder.insert(tk.END, output_folder)

def all_words_present(word_list, text):
    return all(word in text for word in word_list)

def extract_data_from_word(doc_path):
    doc = Document(doc_path)
    company_name = "No Match Found"
    expiry_date = "No Match Found"
    br_number = "No Match Found"
    dates_found = []
    company_address = ""  # Default is blank

    file_name_without_extension = os.path.splitext(os.path.basename(doc_path))[0].upper()
    file_name_without_extension = file_name_without_extension.replace(' CO.,', ' COMPANY').replace(' CO.', ' COMPANY')
    file_name_without_extension = file_name_without_extension.replace(' LTD', ' LIMITED')

    file_name_words_limited = re.findall(r'[\w-]+', file_name_without_extension.split('LIMITED')[0] + 'LIMITED')
    file_name_words_co = re.findall(r'[\w-]+', file_name_without_extension.split(' CO.')[0] + ' CO.')

    lines = [p.text.strip().upper() for p in doc.paragraphs]
    lines_with_key_word = []

    for i, line in enumerate(lines):
        line = line.replace(' CO.,', ' COMPANY').replace(' CO.', ' COMPANY')
        lines[i] = line
        if "LIMITED" in line:
            lines_with_key_word.append(i)

    if not lines_with_key_word:
        for i, line in enumerate(lines):
            if " CO." in line:
                lines_with_key_word.append(i)

    for i in lines_with_key_word:
        surrounding_lines = lines[max(i - 3, 0): min(i + 4, len(lines))]
        surrounding_text = " ".join(surrounding_lines)

        if all_words_present(file_name_words_limited, surrounding_text) or all_words_present(file_name_words_co, surrounding_text):
            company_name = " ".join(file_name_words_limited if "LIMITED" in surrounding_text else file_name_words_co)
            break

    text = " ".join(lines)

    br_numbers_initial = re.findall(r'\d{8}-\d{3}-\d{2}-\d{2}-[A-Za-z0-9]', text)
    if br_numbers_initial:
        br_number = br_numbers_initial[0]
    else:
        # Try the new pattern if the initial pattern didn't find a match
        br_numbers_new = re.findall(r'9(?:[A-Z\d]\s?){17}|4\d{14}', text, re.MULTILINE)
        br_numbers_new = [number.replace(" ", "") for number in br_numbers_new]  # Remove spaces
        if br_numbers_new:
            br_number = br_numbers_new[0]

    for line in lines:
        dates = re.findall(r'\d{2}/\d{2}/\d{4}', line)
        if dates:
            dates_found.extend(dates)

    if len(dates_found) >= 2:
        expiry_date = dates_found[1]

    # If company name is "No Match Found", make it blank.
    if company_name == "No Match Found":
        company_name = ""

    return br_number, company_name, company_address, "", expiry_date  # Return empty string for docx_address

def analyze_general_documents(input_folder, output_folder, excel_file):
    document_analysis_client = DocumentAnalysisClient(endpoint=endpoint, credential=AzureKeyCredential(key))
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["BR Number", "Company Name", "Company Address", "Docx Address", "Expiry Date", "Original File Name", "Original Source", "BR Page", "BR Text Conversion"])
    ws_skipped = wb.create_sheet("Skipped Files")
    ws_skipped.append(["File Name", "Original Source", "Reason"])

    for root, dirs, files in os.walk(input_folder):
        files = sorted(files, reverse=True)

        for file in files:
            file_path = os.path.join(root, file)
            file_ext = os.path.splitext(file)[1]
            output_file_path = os.path.join(output_folder, os.path.splitext(file)[0] + ".docx")

            if os.path.exists(output_file_path):
                print(f"File {file} already exists in the output folder. Skipping...")
                continue

            file_size = os.path.getsize(file_path)
            if file_size > 4 * 1024 * 1024:
                print(f"File {file} is larger than 4MB. Skipping...")
                ws_skipped.append([file, file_path, "File size larger than 4MB"])
                continue

            print(f"Processing {file}...")
            if file_ext.lower() in [".pdf", ".jpg", ".png"]:
                try:
                    with open(file_path, "rb") as f:
                        poller = document_analysis_client.begin_analyze_document("prebuilt-document", f)
                        result = poller.result()
                        doc = Document()
                        for page in result.pages:
                            for line in page.lines:
                                doc.add_paragraph(line.content)
                        doc.save(output_file_path)
                except Exception as e:
                    print(f"Error processing {file}: {str(e)}")
                    ws_skipped.append([file, file_path, str(e)])

    for file in os.listdir(output_folder):
        if file.endswith('.docx'):
            file_path = os.path.join(output_folder, file)
            original_file_name = os.path.splitext(file)[0]
            original_file_path = os.path.join(input_folder, original_file_name)
            original_file_name_without_extension = os.path.splitext(original_file_name)[0]

            for ext in ['.pdf', '.png', '.jpg']:
                if os.path.exists(original_file_path + ext):
                    original_file_path += ext
                    break

            br_number, company_name, company_address, docx_address, expiry_date = extract_data_from_word(file_path)
            row_index = ws.append([br_number, company_name, company_address, docx_address, expiry_date, original_file_name_without_extension, original_file_path, "-", file_path])
            row_index = ws.max_row

            if company_name == "No Match Found":
                red_font = openpyxl.styles.Font(color="FF0000")
                for col in range(1, 7):
                    cell = ws.cell(row=row_index, column=col)
                    cell.font = red_font

            # Add hyperlinks
            ws.cell(row=row_index, column=7).hyperlink = original_file_path
            ws.cell(row=row_index, column=9).hyperlink = file_path

    wb.save(excel_file)

def convert_image_pdf_to_word():
    update_status("Processing...")
    input_folder = entry_input_folder.get()
    output_folder = entry_output_folder.get()
    excel_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "HK BR Data.xlsx")
    analyze_general_documents(input_folder, output_folder, excel_file)
    update_status("Done!")

window = tk.Tk()
window.title("PDF to Word Converter")

label_input_folder = tk.Label(window, text="Input Folder:")
label_input_folder.pack()

entry_input_folder = tk.Entry(window, width=50)
entry_input_folder.pack()

button_select_input_folder = tk.Button(window, text="Select", command=select_input_folder)
button_select_input_folder.pack()

label_output_folder = tk.Label(window, text="Output Folder:")
label_output_folder.pack()

entry_output_folder = tk.Entry(window, width=50)
entry_output_folder.pack()

button_select_output_folder = tk.Button(window, text="Select", command=select_output_folder)
button_select_output_folder.pack()

button_convert = tk.Button(window, text="Convert", command=convert_image_pdf_to_word)
button_convert.pack()

label_status = tk.Label(window, text="")
label_status.pack()

window.mainloop()
