import openpyxl
import datetime
from tkinter import Tk, filedialog
from fuzzywuzzy import fuzz, process
from openpyxl.styles import Font, Border, Side

def load_br_link_map():
    source_excel_path = "HK BR Data.xlsx"
    wb = openpyxl.load_workbook(source_excel_path)
    ws = wb.active

    br_link_map = {}
    company_name_map = set()  # renamed variable

    for row in ws.iter_rows(min_row=2, values_only=True):
        br_number = row[0][:12]  # Updated column
        original_source = row[6]  # Updated column and renamed variable
        expiry_date = row[4].date() if isinstance(row[4], datetime.datetime) else row[4]  # Updated column
        
        # Check if company_name is not None before converting to lowercase, else use an empty string
        company_name = row[1].lower() if row[1] else ""  # Updated column and added check
        
        if isinstance(expiry_date, str):
            try:
                expiry_date = datetime.datetime.strptime(expiry_date, "%d/%m/%Y").date()
            except ValueError:
                print(f"Unexpected date format for BR number {br_number}: {expiry_date}")
                expiry_date = datetime.date(1900, 1, 1)

        if br_number in br_link_map:
            existing_source, existing_expiry_date = br_link_map[br_number]
            if expiry_date > existing_expiry_date:
                br_link_map[br_number] = (original_source, expiry_date)
        else:
            br_link_map[br_number] = (original_source, expiry_date)

        company_name_map.add(company_name)  # renamed variable

    return br_link_map, company_name_map  # renamed variable

def normalize_business_name(name):
    words_to_ignore = ["company", "limited", "co.", "ltd", "&", ".", " ", ",", "-"]
    normalized = name.lower()
    for word in words_to_ignore:
        normalized = normalized.replace(word, "")
    return normalized

def update_excel_hyperlinks(target_excel_path, br_link_map, business_name_map, business_name_to_actual):
    wb = openpyxl.load_workbook(target_excel_path)
    ws = wb.active

    red_font = Font(color="FF0000")

    rows_updated = 0
    for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        # Combine the values from columns E and F to get the BR number in "xxxxxxxx-xxx" format
        target_br_number = f"{row[4]}-{row[5]}"

        print(f"Checking BR number from target Excel: {target_br_number}...")
        
        if target_br_number in br_link_map:
            source_link, expiry_date = br_link_map[target_br_number]
            print(f"Match found: Target BR number {target_br_number} matches with source BR number {target_br_number}.")
            
            cell = ws.cell(row=idx, column=5)
            cell.hyperlink = source_link

            expiry_cell = ws.cell(row=idx, column=8)
            expiry_cell.value = expiry_date
            expiry_cell.number_format = 'DD-MMM-YYYY'
            
            cell.style = "Hyperlink"

            border = Border(left=Side(border_style="thin"),
                            right=Side(border_style="thin"),
                            top=Side(border_style="thin"),
                            bottom=Side(border_style="thin"))
            cell.border = border

            rows_updated += 1
        else:
            print(f"No matching BR number found for: {target_br_number} in source data. Skipping fuzzy matching.")
            continue

        business_name = str(row[2])
        normalized_business_name = normalize_business_name(business_name)
        
        best_match, score = process.extractOne(normalized_business_name, business_name_to_actual.keys())
        actual_business_name = business_name_to_actual[best_match]
        
        if score < 90:
            print(f"No exact match found for business name: {business_name}. Changing font color to red.")
            cell = ws.cell(row=idx, column=3)
            cell.font = red_font
        else:
            print(f"Matching Business Name found: {actual_business_name}. Keeping the font color unchanged.")

    wb.save(target_excel_path)
    print(f"Update complete. Updated {rows_updated} rows.")


if __name__ == "__main__":
    br_link_map, company_name_map = load_br_link_map()  # renamed variable

    company_name_to_actual = {}  # renamed variable
    for company_name in company_name_map:  # renamed variable
        normalized_name = normalize_business_name(company_name)
        company_name_to_actual[normalized_name] = company_name  # renamed variable
    
    root = Tk()
    root.withdraw()

    target_excel_path = filedialog.askopenfilename(title="Select the Excel file to update", filetypes=[("Excel files", "*.xlsx;*.xlsm")])
    if not target_excel_path:
        print("No file selected. Exiting...")
        exit()

    update_excel_hyperlinks(target_excel_path, br_link_map, company_name_map, company_name_to_actual)  # renamed variable
    print("Hyperlinks and Expiry Dates updated successfully.")
