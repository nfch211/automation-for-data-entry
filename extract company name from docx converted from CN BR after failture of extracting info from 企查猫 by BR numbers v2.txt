import os
import re
from tkinter import Tk, filedialog
from openpyxl import load_workbook
from docx import Document
from docx.opc.exceptions import PackageNotFoundError

# Function to extract text following "称" at the beginning of the line or the next line
def extract_text_after_character(docx_path, character):
    try:
        doc = Document(docx_path)
    except PackageNotFoundError:
        print(f"DOCX file not found at: {docx_path}")
        return None  # Return None if the DOCX file is not found
    
    doc_text = '\n'.join(paragraph.text for paragraph in doc.paragraphs)
    match = re.search(fr'{character}([^\n]*)', doc_text)
    if match and match.group(1).strip():
        # Text found on the same line after the character
        return match.group(1).strip()
    else:
        # If the character is found but no text on the same line, get the next line's text
        lines = doc_text.split('\n')
        for i, line in enumerate(lines):
            if character in line:
                # Return the next line if it exists
                return lines[i + 1].strip() if i + 1 < len(lines) else None
    return None

# Function to prompt user for selection of the Excel file
def prompt_for_excel_selection():
    Tk().withdraw()  # Hide the root window
    excel_path = filedialog.askopenfilename(
        title="Select Excel file",
        filetypes=(("Excel files", "*.xlsx"), ("All files", "*.*"))
    )
    return excel_path

# Main logic to process Excel and DOCX
def process_excel_and_docx():
    # Prompt the user for the Excel file
    excel_path = prompt_for_excel_selection()
    if not excel_path:  # Exit if no file is selected
        print("No file selected. Exiting.")
        return

    # Load the Excel workbook
    wb = load_workbook(excel_path)
    ws = wb.active

    # Iterate through the rows and process DOCX paths
    for row in ws.iter_rows(min_row=2):
        docx_path_cell = row[7]  # Column H is the 8th column
        status_cell = row[1]     # Status is assumed to be in Column B

        if (status_cell.value == 'N/A' or status_cell.value == 'No Match Found') and docx_path_cell.value:
            # Construct the full path to the DOCX file
            full_docx_path = os.path.join(os.path.dirname(excel_path), docx_path_cell.value)
            print(f"Processing DOCX file at: {full_docx_path}")
            
            # Extract text after the character "称"
            full_text = extract_text_after_character(full_docx_path, "称")
            
            if full_text is None:
                print(f"No content found after '称' or file not found.")
                continue  # Skip this row if the DOCX file is not found or no content

            # Print the extracted text to the command line for verification
            print(f"Extracted text after '称': {full_text}\n")

            # Replace the cell value with extracted text
            status_cell.value = full_text

    # Save the workbook with a new name
    new_excel_path = excel_path.replace('.xlsx', '_processed.xlsx')
    wb.save(new_excel_path)
    print(f"Processed Excel file saved as: {new_excel_path}")

# Run the main logic
process_excel_and_docx()
