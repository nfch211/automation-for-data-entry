import os
import openpyxl
import re
from docx import Document
from openpyxl.styles import Font
import datetime
from tkinter import Tk, filedialog

def preprocess_text(text):
    """Remove non-alphanumeric characters and convert text to lowercase."""
    return re.sub(r'[^a-zA-Z0-9\s]', '', text).replace(' ', '').lower()

def add_hyperlink(cell, file_path):
    """Add a hyperlink to a cell if the file exists."""
    if os.path.exists(file_path):
        cell.hyperlink = file_path
        cell.style = "Hyperlink"
    else:
        print(f"File not found for path: {file_path}")

def join_split_text(doc_text_preprocessed, words):
    idx = 0
    extracted_words = []
    for word in words:
        new_idx = doc_text_preprocessed.find(word, idx)
        if new_idx == -1:
            break
        extracted_words.append(doc_text_preprocessed[idx:new_idx+len(word)])
        idx = new_idx + len(word)
    return ''.join(extracted_words).strip()

def is_present_in_docx(company_address_preprocessed, doc_text_preprocessed):
    words = company_address_preprocessed.split()
    combined_text = join_split_text(doc_text_preprocessed, words)
    return company_address_preprocessed in combined_text

def extend_address_from_docx(doc_text, partial_address, complete_address):
    try:
        start_index = doc_text.index(partial_address)
        end_index = start_index + len(partial_address)
        
        lines = doc_text.split('\n')
        current_line_index = 0
        for idx, line in enumerate(lines):
            if partial_address in line:
                current_line_index = idx
                break

        while True:
            next_word_match = re.search(r'(\S+)', doc_text[end_index:])
            if not next_word_match:
                current_line_index += 1
                if current_line_index < len(lines):
                    doc_text = lines[current_line_index]
                    end_index = 0
                    continue
                else:
                    break

            next_word = next_word_match.group(1)
            if complete_address.startswith(partial_address + next_word):
                partial_address += next_word
                end_index += len(next_word)
            else:
                break

    except ValueError:
        pass
    
    return partial_address

def find_address_with_criteria(doc, min_matches):
    characters_to_match = ['省', '市', '镇', '路', '号', '楼', '室', '区']
    
    for para in doc.paragraphs:
        count = sum([para.text.count(char) for char in characters_to_match])
        if count >= min_matches:
            text = para.text.strip()
            if text.startswith("所 "):
                text = text[2:]
            return text
    return None

def find_line_in_docx(doc):
    result = find_address_with_criteria(doc, 3)
    
    if not result:
        result = find_address_with_criteria(doc, 2)
    
    return result

def process_excel(file_path):
    """Process Excel to compare company addresses with docx contents and add clickable hyperlinks."""
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active
    
    # Define columns and fonts
    company_name_col = 2
    company_address_col = 3
    docx_address_col = 4
    path_to_docx_col = 8
    blue_font = Font(color="0000FF")
    red_font = Font(color="FF0000")
    
    # Convert paths to clickable links for specific headers
    headers_to_convert = ["Original Source", "BR Page", "BR Text Conversion"]
    for header in headers_to_convert:
        col_index = None
        for cell in sheet[1]:
            if cell.value == header:
                col_index = cell.column
                break
        if col_index:
            for row_num in range(2, sheet.max_row + 1):
                file_path_cell = sheet.cell(row=row_num, column=col_index)
                if file_path_cell.value and isinstance(file_path_cell.value, str):
                    add_hyperlink(file_path_cell, file_path_cell.value.strip())

    # Process each row in Excel for company address and docx comparison
    for row in sheet.iter_rows(min_row=2):
        company_name = row[company_name_col - 1].value
        company_address = row[company_address_col - 1].value

        # Check for invalid data types or None values
        if (not isinstance(company_name, str) or not company_name) or \
           (not isinstance(company_address, str) or not company_address):
            continue
        
        docx_path = row[path_to_docx_col - 1].value
        if docx_path and isinstance(docx_path, str) and os.path.exists(docx_path.strip()):
            doc = Document(docx_path.strip())
            doc_text = " ".join([para.text for para in doc.paragraphs])
            
            company_name_preprocessed = preprocess_text(company_name)
            company_address_preprocessed = preprocess_text(company_address)
            doc_text_preprocessed = preprocess_text(doc_text)
            
            company_name_found = company_name_preprocessed in doc_text_preprocessed
            company_address_found = is_present_in_docx(company_address_preprocessed, doc_text_preprocessed)
                
            sheet.cell(row=row[0].row, column=company_name_col).font = blue_font if company_name_found else red_font
            if company_address_found:
                sheet.cell(row=row[0].row, column=docx_address_col).value = "-"
                sheet.cell(row=row[0].row, column=company_address_col).font = blue_font
            else:
                sheet.cell(row=row[0].row, column=company_address_col).font = red_font
                line = find_line_in_docx(doc)
                if line:
                    extended_line = extend_address_from_docx(doc_text, line, company_address)
                    sheet.cell(row=row[0].row, column=docx_address_col).value = extended_line
                else:
                    print(f"Address not found in docx for: {company_address}")

    # Save updated workbook
    updated_file_path = os.path.splitext(file_path)[0] + "_updated.xlsx"
    workbook.save(updated_file_path)
    print("Processing complete.")

def main():
    root = Tk()
    root.withdraw()
    excel_file_path = filedialog.askopenfilename(title="Select Excel file", filetypes=[("Excel Files", "*.xlsx")])

    if excel_file_path:
        process_excel(excel_file_path)
    else:
        print("No Excel file selected.")

if __name__ == "__main__":
    main()
